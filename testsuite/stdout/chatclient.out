
 (# Enclave Type Declarations #)
clear: cond^(1, 2)_low;
displaymsg: string_low;
erasechat: int_low^(1, 2) ref_low;
exit: int_low^(1, 2) ref_low;
join: int_low^(1, 2) ref_low;
log: int_high /clear T^(1, 2) ref_low;
receive: int_low^(1, 2) ref_low;
recvmsg: string_low;
send: int_low^(1, 2) ref_low;
sendmsg: string_low;
l1: int_high /clear T^(1, 1) ref_low;
l2: string_low^(0, -1) ref_low;
l3: string_low^(0, -1) ref_low;
l5: int_low^(0, -1) ref_low;
l6: int_low^(0, -1) ref_low;
l7: int_low^(0, -1) ref_low;
l8: int_low^(0, -1) ref_low;
l9: int_low^(0, -1) ref_low;

 (# Enclave Program #)
log:= l1;
exit:= l5;
join:= l6;
receive:= l7;
send:= l8;
erasechat:= l9;
while *exit == 1 do 
 while *join == 1 do 
 if *receive == 1 then 
 recvmsg:= *l2;
enclave(1, 
 log <- recvmsg;
);
displaymsg:= "received";
Output displaymsg to L ;
receive <- 0 ;
 
 else 
 if *send == 1 then 
 sendmsg:= *l3;
enclave(1, 
 log <- sendmsg;
);
Output sendmsg to L ;
send <- 0 ;
 
 else 
 if *erasechat == 1 then 
 enclave(1, 
 log <- "0";
);
set(clear);
join <- 0 ;
 
 else 
 skip;
 
 fi;
 
 fi;
 
 fi;
 
 end;
log:= l9;
 
 end;
displaymsg:= "Bye";
kill(1);
kill(2);
Output displaymsg to L ;
